--[[
    聊天界面
--]]

local ChatLayer = class("ChatLayer", function()
	return display.newLayer()
end)
local scheduler = require("framework.scheduler")

local ChatViewBg = "ChatView_Bg.png"
local ChatLine = "Chat_Line.png"
local ChatClose_1 = "Chat_Close_1.png"
local ChatClose_2 = "Chat_Close_2.png"
local SetBtn_1 = "Set_Btn_1.png"
local SetBtn_2 = "Set_Btn_2.png"
local ChannelBtn_1 = "Channel_Btn_1.png"
local ChannelBtn_2 = "Channel_Btn_2.png"
local ExpressBtn_1 = "Express_Btn_1.png"
local ExpressBtn_2 = "Express_Btn_2.png"
local ExpressBtn_3 = "Express_Btn_3.png"
local Button_Sent_1 = "Button_Enter.png"
local Button_Sent_2 = "Button_Enter_Light.png"
local Button_Sent_3 = "Button_Gray.png"

local BUTTON_ID = {
	BUTTON_SENT = 1,
	BUTTON_EXPRESS = 2,
}

function ChatLayer:ctor()

	self:addNodeEventListener(cc.NODE_EVENT,function(event)
        if event.name == "enter" then
            self:onEnter()
        elseif event.name == "exit" then
            self:onExit()
        end
    end)

	self:initData()
	self:initView()

end

function ChatLayer:initData()
	self.channels     = {}   -- 频道按钮
	self.systemData   = ChatData.sysData    -- 系统频道 消息内容
	self.worldData    = ChatData.worldData  -- 世界频道
	self.chatMsg      = ""   -- 发送内容
	self.sectionIndex = 2    -- 默认显示世界频道
	self.nextMsgTime  = 0
	self.isCloseSche  = false

end

function ChatLayer:initView()
	CommonView.blackLayer2()
    :addTo(self)

    self.layer_ = display.newNode():size(960, 640):align(display.CENTER)
    :addTo(self)
    :pos(display.left+403,display.cy)
    :zorder(1)

    display.newSprite(ChatViewBg):pos(480,322):addTo(self.layer_)
    display.newSprite(ChatLine):pos(200,287):addTo(self.layer_)

    -- 关闭按钮
    local image_ = {normal = ChatClose_1, pressed = ChatClose_2}
	CommonButton.yellow3("",{image = image_})
	:addTo(self.layer_, 1)
	:pos(904, 320)
	:onButtonClicked(function()
		if self.isCloseSche then
			scheduler.unscheduleGlobal(self.schedule)
		end
        self.delegate.chatLeftView:updateData()
        self.delegate.chatLeftView:updateView()

		CommonSound.close() -- 音效
		if self.delegate.chatView.textfield then
			self.delegate.chatView.textfield:removeFromParent()
			self.delegate.chatView.textfield = nil
		end
 		self.delegate.chatView:hide()

	end)

    -- 设置按钮
    local image_ = {normal = SetBtn_1, pressed = SetBtn_2}
	CommonButton.yellow3("",{image = image_})
	:addTo(self.layer_,1)
	:pos(133, 58)
	:onButtonClicked(function()
        self.delegate:createChatSetView()
	end)

	-- 表情按钮
	local image_ = {normal = ExpressBtn_1, pressed = ExpressBtn_2, disabled = ExpressBtn_3}
	self.expressBtn = CommonButton.yellow3("",{image = image_})
	self.expressBtn:addTo(self.layer_,1)
	self.expressBtn:pos(686, 600)
	self.expressBtn:onButtonClicked(handler(self,self.buttonEvent))
	self.expressBtn:setTag(BUTTON_ID.BUTTON_EXPRESS)

	-- 发送按钮
	local image_ = {normal = Button_Sent_1, pressed = Button_Sent_2, disabled = Button_Sent_3}
	self.sentBtn = CommonButton.yellow3("发送",{image = image_})
	self.sentBtn:addTo(self.layer_,1)
	self.sentBtn:pos(796, 600)
	self.sentBtn:onButtonClicked(handler(self,self.buttonEvent))
	self.sentBtn:setTag(BUTTON_ID.BUTTON_SENT)

    self.listView = base.ListView.new({
		viewRect = cc.rect(0, 0, 665, 520),
		itemSize = cc.size(665, 132),
	}):addTo(self.layer_,3)
	:pos(200, 27)

    -- 创建频道
	self:createChannels()
	-- self:createEditBox()

end

function ChatLayer:createChannels()
    local image_ = {normal = ChannelBtn_1, selected = ChannelBtn_2,disabled = ChannelBtn_1}

    local btn = CommonButton.sidebar_("系统",{image = image_})
    :addTo(self.layer_,1)
    table.insert(self.channels, btn)

    local btn = CommonButton.sidebar_("世界",{image = image_})
    :addTo(self.layer_,1)
    table.insert(self.channels, btn)

    local btn = CommonButton.sidebar_("公会",{image = image_})
    :addTo(self.layer_,1)
    table.insert(self.channels, btn)

    self.btnGroup_ = base.ButtonGroup.new({
        zorder1 = 1,
        zorder2 = 5,
    })
    :addButtons(self.channels)
    :walk(function(index, button)
    	button:pos(134, 500 - (index-1) * 75)
    end)
    :onEvent(function(event)
    	if event.selected ~= 3 then
    		self:selectedChannel(event.selected)
    	else
    		showToast({text = "去创建公会吧！"})
    		event.target:selectedButtonAtIndex_(event.last)
    	end

    end)

end

function ChatLayer:createEditBox()
		-- 输入框
	local function onEdit(event, editbox)
		if event == "began" then
	        -- 开始输入
	    elseif event == "changed" then

	    	if self.sectionIndex == 1 then
	    		editbox:setText("")
	    	elseif self.sectionIndex == 2 then
	    		if OpenLvData:isOpen("sendMessage") then
	    			-- 输入框内容发生变化
			        local _text = editbox:getText()
		            self.chatMsg = _text

					local _trimed = string.trim(_text)
				    _trimed = parseString(_trimed, 130, 2)

					if _trimed ~= _text then
						editbox:setText(_trimed)
					end
				else
					editbox:setText("")
					showToast({text = "战队30级开启发送消息！"})
	    		end
	    	end

	    elseif event == "ended" then
	        -- 输入结束
	    elseif event == "return" then
	        -- 从输入框返回
	    end
	end

	local textBack = display.newScale9Sprite()
	textBack:setOpacity(100)

	self.textfield = cc.ui.UIInput.new({
	    UIInputType = 1,
	    image = textBack,
	    -- "Input_Box.png",
	    size = cc.size(550, 35),
	   	x = 95,
	    y = 600,
	    listener = onEdit,
	}):addTo(self.layer_)
	:align(display.LEFT_CENTER)
	self.textfield:setMaxLength(66)

end

function ChatLayer:buttonEvent(event)

	AudioManage.playSound("Click.mp3")
	if OpenLvData:isOpen("sendMessage") then
		local tag = event.target:getTag()
	    if tag == BUTTON_ID.BUTTON_SENT then
	    	if self.chatMsg == "" then
	    		showToast({text = "发送内容不能为空！"})
	    	else
	    		local channelType = 3   -- 世界聊天
	    		NetHandler.gameRequest("SendChatMsg",{param1 = channelType, param2 = self.chatMsg})
	    		self.chatMsg  = ""

	    		self.isCloseSche = true
	    		if self.textfield then
	    			self.textfield:setText("")
	    		end
				self.sentBtn:setButtonEnabled(false)
				self.sentBtn:setButtonLabel(cc.ui.UILabel.new({text = "10s", size = 26}))

		        self.nextMsgTime = UserData:getServerSecond()+GlobalData.sentMsgCold  -- 结束倒计时的时间戳
		        local time_ = self.nextMsgTime - UserData:getServerSecond()

				function update1(dt)
					time_ = time_ - 1
			        self.sentBtn:setButtonLabel(cc.ui.UILabel.new({text = time_.."s", size = 26}))
		    		:setButtonLabelAlignment(display.CENTER)
			    end
			    function stop1()
			    	self.nextMsgTime = 0
			    	self.sentBtn:setButtonEnabled(true)
			        self.sentBtn:setButtonLabel(cc.ui.UILabel.new({text = "发送", size = 26}))
		    		:setButtonLabelAlignment(display.CENTER)
		    		self.isCloseSche = false
			        scheduler.unscheduleGlobal(self.schedule)
			    end
			    self.schedule = scheduler.scheduleGlobal(update1, 1)
			    scheduler.performWithDelayGlobal(stop1, time_)
	    	end
	    elseif tag == BUTTON_ID.BUTTON_EXPRESS then
			self.delegate:createExpressView()
		end
	else
		showToast({text = "战队30级开启发送消息！"})
	end

end

-- 添加消息
function ChatLayer:addListItem()

	local msgData = {}
	if self.sectionIndex == 1 then -- 系统频道
		msgData = self.systemData
	elseif self.sectionIndex == 2 then  -- 世界频道
		msgData = self.worldData
	elseif self.sectionIndex == 3 then  -- 公会频道
		msgData = self.unionData
	end

    self.listView:removeAllItems()
    for i=1,#msgData do
    	local itemHeight = 0
    	local msg = base.TalkLabel.new({
	    		text  = msgData[i].msg,
				size  = 22,
				dimensions = cc.size(590,0),
				scale = 0.46,
	    	})
		itemHeight = 32*msg:getLines()+100
    	self.listView:addSizeItem(cc.size(665,itemHeight),function(event)
			local data  = msgData[i]
			local grid = base.Grid.new()
			self:setGridShow(grid, data, self.sectionIndex)
			return grid
		    end)
    end
    self.listView:reload()

end

function ChatLayer:updateSendBtn( callback )
	if self.nextMsgTime ~= 0 then
		if self.sectionIndex == 1 then
			if self.textfield then
				self.textfield:setPlaceHolder("该频道不能发言，请切换至其他频道")
			end
		elseif self.sectionIndex == 2 then
			if self.textfield then
				self.textfield:setPlaceHolder("最多输入65个字")
			end
		end
		self.isCloseSche = true
		local time_ = math.ceil(self.nextMsgTime - UserData:getServerSecond())
        self.sentBtn:setButtonEnabled(false)
		self.sentBtn:setButtonLabel(cc.ui.UILabel.new({text = time_.."s", size = 26}))

		function update1(dt)
			time_ = time_ - 1
	        self.sentBtn:setButtonLabel(cc.ui.UILabel.new({text = time_.."s", size = 26}))
    		:setButtonLabelAlignment(display.CENTER)
	    end
	    function stop1()
	    	self.nextMsgTime = 0
    		self.sentBtn:setButtonEnabled(true)
	        self.sentBtn:setButtonLabel(cc.ui.UILabel.new({text = "发送", size = 26}))
    		:setButtonLabelAlignment(display.CENTER)
    		self.isCloseSche = false
	        scheduler.unscheduleGlobal(self.schedule)
	    end
	    self.schedule = scheduler.scheduleGlobal(update1, 1)
	    scheduler.performWithDelayGlobal(stop1, time_)
	else
		if callback then
			callback()
		end
	end
end

function ChatLayer:selectedChannel(index)

	self.sectionIndex = index

    if index == 1 then    --  系统消息频道
		self.listView:removeAllItems()
	    for i=1,#self.systemData do
	    	local itemHeight = 0
	    	local msg = base.TalkLabel.new({
		    		text  = self.systemData[i].msg,
					size  = 22,
					dimensions = cc.size(590,0),
					scale = 0.46,
		    	})
			itemHeight = 32*msg:getLines()+30
	    	self.listView:addSizeItem(cc.size(665,itemHeight),function(event)
				local data  = self.systemData[i]
				local grid = base.Grid.new()
				self:setGridShow(grid, data, 1)
				return grid
			    end)
	    end
	    self.listView:reload()
    elseif index == 2 then  --  世界消息频道
		self.listView:removeAllItems()
	    for i=1,#self.worldData do
	    	local itemHeight = 0
	    	local msg = base.TalkLabel.new({
		    		text  = self.worldData[i].msg,
					size  = 22,
					dimensions = cc.size(590,0),
					scale = 0.46,
		    	})
			itemHeight = 32*msg:getLines()+100
	    	self.listView:addSizeItem(cc.size(665,itemHeight),function(event)
				local data  = self.worldData[i]
				local grid = base.Grid.new()
				self:setGridShow(grid, data, 2)
				return grid
			    end)
	    end
	    self.listView:reload()
	elseif index == 3 then  --  公会消息频道
		self.listView:removeAllItems()
	    for i=1,#self.unionData do
	    	local itemHeight = 0
	    	local msg = base.TalkLabel.new({
		    		text  = self.unionData[i].msg,
					size  = 22,
					dimensions = cc.size(590,0),
					scale = 0.46,
		    	})
			itemHeight = 32*msg:getLines()+100
	    	self.listView:addSizeItem(cc.size(665,itemHeight),function(event)
				local data  = self.unionData[i]
				local grid = base.Grid.new()
				self:setGridShow(grid, data, 2)
				return grid
			    end)
	    end
	    self.listView:reload()
    end

    if self.sectionIndex == 1 then
		if self.isCloseSche then
			scheduler.unscheduleGlobal(self.schedule)
		end
        if self.textfield then
        	self.textfield:setPlaceHolder("该频道不能发言，请切换至其他频道")
	    	self.textfield:setText("")
        end
    	self.sentBtn:setButtonLabel(cc.ui.UILabel.new({text = "发送", size = 26}))
    	self.expressBtn:setButtonEnabled(false)
    	self.sentBtn:setButtonEnabled(false)
    elseif self.sectionIndex == 2 then
    	self:updateSendBtn(function()
    		if self.textfield then
    			self.textfield:setPlaceHolder("最多输入65个字")
    		end
	    	self.expressBtn:setButtonEnabled(true)
	    	self.sentBtn:setButtonEnabled(true)
    	end)
	elseif self.sectionIndex == 3 then
		if self.textfield then
			self.textfield:setPlaceHolder("最多输入65个字")
		end
    	self.expressBtn:setButtonEnabled(true)
    	self.sentBtn:setButtonEnabled(true)
    end
end

function ChatLayer:setGridShow(grid, data, index)

	if index == 1 then       -- 系统
		grid:removeItems()
		:addItems({
	        display.newSprite("System_Tip.png"):pos(-295,10),
		})

		local msg = base.TalkLabel.new({
	    		text  = data.msg,
				size  = 22,
				dimensions = cc.size(590,0),
				scale = 0.45,
	    	})
	    msg:pos(-250, 23-29*msg:getLines())
	    grid:addItem(msg)

	elseif index == 2 then   -- 世界频道
        if data.sender ~= UserData.teamId then  -- 对方消息
        	local nameLabel = display.newTTFLabel({text = data.name,color = CommonView.color_blue(),size = 22})
			nameLabel:pos(-147+nameLabel:getContentSize().width/2,40)

			local vipLabel = cc.Label:createWithCharMap("word2.png",15,20,48)
			vipLabel:setString(data.vipLevel)
			vipLabel:pos(-100+nameLabel:getContentSize().width,40)

			local msg = base.TalkLabel.new({
		    		text  = data.msg,
					size  = 22,
					dimensions = cc.size(545,0),
					scale = 0.45,
		    	})
		    msg:pos(-214, 12-29*msg:getLines())

		    local posX = 50
		    local widthScale = 545
		    if msg:getLines() == 1 then
		    	widthScale = msg:getTotalWidth()+20
		    	posX = -225 + widthScale/2
		    	msg:pos(-217, 14-29*msg:getLines())
		    end

			grid:removeItems()
			:addItems({
				display.newSprite("Mail_Circle.png"):scale(0.75):pos(-290,20),
				display.newSprite("World_Tip.png"):pos(-190,40),
		        display.newSprite("Vip_Small.png"):pos(-125+nameLabel:getContentSize().width,40),
		        nameLabel,
		        vipLabel,
		        display.newSprite(data.headIcon):scale(0.75):pos(-290,20),
		        display.newScale9Sprite("Chat_Bg_Other.png", posX, 17-35*msg:getLines()/2, cc.size(widthScale,35*msg:getLines())),
		        display.newSprite("Chat_Tip_Other.png"):pos(-228,0),
		        msg,
			})
        else -- 我方消息

        	local nameLabel = display.newTTFLabel({text = data.name,color = CommonView.color_blue(),size = 22})
			nameLabel:pos(95-nameLabel:getContentSize().width/2,40)

			local vipLabel = cc.Label:createWithCharMap("word2.png",15,20,48)
			vipLabel:setString(data.vipLevel)
			vipLabel:pos(143,40)

			local msg = base.TalkLabel.new({
		    		text  = data.msg,
					size  = 22,
					dimensions = cc.size(545,0),
					scale = 0.45,
		    	})
		    msg:pos(-310, 12-29*msg:getLines())

		    local posX = -44
		    local widthScale = 545
		    if msg:getLines() == 1 then
		    	widthScale = msg:getTotalWidth()+20
		    	posX = 228-widthScale/2
		    	msg:pos(220-msg:getTotalWidth(), 14-29*msg:getLines())
		    end

			grid:removeItems()
			:addItems({
				display.newSprite("Mail_Circle.png"):scale(0.75):pos(290,20),
				display.newSprite("World_Tip.png"):pos(195,40),
		        display.newSprite("Vip_Small.png"):pos(115,40),
		        nameLabel,
		        vipLabel,
		        display.newSprite(data.headIcon):scale(0.75):pos(290,20),
		        display.newScale9Sprite("Chat_Bg_Self.png", posX, 17-35*msg:getLines()/2, cc.size(widthScale,35*msg:getLines())),
		        display.newSprite("Chat_Tip_Self.png"):pos(232,0),
		        msg,
			})
        end

	end
end

function ChatLayer:updateData()
	self.systemData   = ChatData.sysData    -- 系统频道 消息内容
	self.worldData    = ChatData.worldData  -- 世界频道
	self.unionData    = ChatData.unionData  -- 世界频道
end

function ChatLayer:updateView()
    self:updateSendBtn(function()
    		self.btnGroup_:selectedButtonAtIndex_(self.sectionIndex)
			self:selectedChannel(self.sectionIndex)
            if self.textfield then
            	self.textfield:setText("")
            end
    	end)
end

function ChatLayer:onEnter()
	self:updateData()
	self:updateView()
	self.netEvent = GameDispatcher:addEventListener(EVENT_CONSTANT.NET_CALLBACK,handler(self,self.netCallback))
end

function ChatLayer:netCallback(event)
	local data = event.data
    local order = data.order
	if order == OperationCode.SendChatMsgProcess then

	elseif order == OperationCode.RecieveChatMsgProcess then
		self:updateData()
        if data.param1 == "2" then -- 接收系统消息
        	if self.sectionIndex == 1 then -- 系统频道
				self:addListItem()
			end
        elseif data.param1 == "3" then  -- 接收世界消息
        	if self.sectionIndex == 2 then -- 世界频道
				self:addListItem()
			end
        end
	end
end

function ChatLayer:onExit()
	-- body
end

return ChatLayer
