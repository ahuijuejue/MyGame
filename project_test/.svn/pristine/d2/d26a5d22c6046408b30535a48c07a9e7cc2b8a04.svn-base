
local ChatLeftView = class("ChatLeftView", function()
	return display.newNode()
end)

function ChatLeftView:ctor()
	local isPush = true
	self:setTouchEnabled(true)
	self:addNodeEventListener(cc.NODE_TOUCH_EVENT, function(event)
		if event.name == "began" then
			return true
		elseif event.name == "moved" then
			isPush = false
		elseif event.name == "ended" then
		    if event.x < 330 and event.y < 93 then
		    	if isPush then
					self.delegate.chatView.sectionIndex = 2
					self.delegate.chatView.chatMsg = ""
					if not self.delegate.chatView.textfield then
						self.delegate.chatView:createEditBox()
					end
					self.delegate.chatView:show()
					self.delegate.chatView:updateData()
					self.delegate.chatView:updateView()
				else
					isPush = true
				end
		    end
		end
    end)

    self:initData()
    self:initView()
end

function ChatLeftView:initData()
	self.showData = {}
	self.chatCounts = 1
end

function ChatLeftView:initView()

	self.back = display.newSprite("left_back.png")
    :pos(display.left+130,display.bottom)
    :addTo(self)

	self.listView = cc.TableView:create(cc.size(320, 105))
	self.listView:setPosition(0, 3)
	self.listView:setDirection(cc.SCROLLVIEW_DIRECTION_VERTICAL)
	self.listView:setVerticalFillOrder(cc.TABLEVIEW_FILL_TOPDOWN)

    self.listView:setDelegate()
    self.listView:registerScriptHandler(handler(self, self.scrollViewDidScroll), 0)
    self.listView:registerScriptHandler(handler(self, self.tableCellTouched), cc.TABLECELL_TOUCHED)
	self.listView:registerScriptHandler(handler(self, self.cellSizeForTable), cc.TABLECELL_SIZE_FOR_INDEX)
    self.listView:registerScriptHandler(handler(self, self.tableCellAtIndex), cc.TABLECELL_SIZE_AT_INDEX)
    self.listView:registerScriptHandler(handler(self, self.numberOfCellsInTableView), cc.NUMBER_OF_CELLS_IN_TABLEVIEW)
    self.listView:reloadData()
	self.listView:addTo(self.back)

end

function ChatLeftView:scrollViewDidScroll(table)

end

function ChatLeftView:tableCellTouched(table,cell)
	self.delegate.chatView.sectionIndex = 2
	self.delegate.chatView.chatMsg = ""
	if not self.delegate.chatView.textfield then
		self.delegate.chatView:createEditBox()
	end
	self.delegate.chatView:show()
	self.delegate.chatView:updateData()
	self.delegate.chatView:updateView()
end

function ChatLeftView:cellSizeForTable(table,idx)
	if #self.showData == 0 then
		return 33
	else
		local data = self.showData[idx+1]
	    local itemHeight = 0
	    local msg_ = ""
		if data.name ~= "" then
			msg_ = string.format(data.name..":%s", data.msg)
		else
			msg_ = string.format("[公告]:%s", data.msg)
		end
		local msg = base.TalkLabel.new({
	    		text  = msg_,
				size  = 18,
				dimensions = cc.size(250,0),
				scale = 0.28,
	    	})
		itemHeight = 20*msg:getLines() + 13
		return itemHeight
	end
end

function ChatLeftView:tableCellAtIndex(table,idx)
	return self:createCell(idx)
end

function ChatLeftView:numberOfCellsInTableView(table)
	return self.chatCounts
end

function ChatLeftView:createCell( idx )
	local cell = cc.TableViewCell:new()
	cell:setIdx(idx)

	if self.chatCounts == 1 and #self.showData == 0 then
		createOutlineLabel({text = "暂无聊天消息",size = 18}):pos(95,20):addTo(cell)
	else
		local data  = self.showData[idx+1]
		if data.channelType == "2" then -- 系统消息
			local itemHeight = 0
			local gg  = "<{255,44,44}[公告]>"
		    local msg = base.TalkLabel.new({
		    		text  = gg..data.msg,
					size  = 18,
					dimensions = cc.size(250,0),
					scale = 0.28,
		    	})
		    itemHeight = 20*msg:getLines()
			if msg:getLines() == 1 then
		        msg:pos(55, 10):addTo(cell)
		        display.newSprite("System_Tip.png"):pos(25,20):scale(0.7):addTo(cell)
			else
				msg:pos(55, itemHeight+7-20*msg:getLines()):addTo(cell)
		        display.newSprite("System_Tip.png"):pos(25,itemHeight-5):scale(0.7):addTo(cell)
			end
		elseif data.channelType == "3" then -- 世界消息
			local name = string.format("<{0,248,248}%s:>", data.name)  --48,200,248
			local msg = string.format(name.."%s", data.msg)
			local itemHeight = 0
			local msg = base.TalkLabel.new({
		    		text  = msg,
					size  = 18,
					dimensions = cc.size(250,0),
					scale = 0.28,
		    	})
			itemHeight = 20*msg:getLines()
			if msg:getLines() == 1 then
				msg:pos(55, 10):addTo(cell)
		        display.newSprite("World_Tip.png"):pos(25,20):scale(0.7):addTo(cell)
			else
				msg:pos(55, itemHeight+7-20*msg:getLines()):addTo(cell)
		        display.newSprite("World_Tip.png"):pos(25,itemHeight-5):scale(0.7):addTo(cell)
			end
		end
	end

    return cell
end

function ChatLeftView:updateData()
    self.showData = {}
    for k,v in pairs(ChatData.allLeftData) do
		table.insert(self.showData, {
			id = tonumber(k),
			channelType = v.channelType,
			name = v.name,
			msg = v.msg,
			})
	end
	if #self.showData ~= 0 then
		self.chatCounts = #self.showData
	end
end

function ChatLeftView:updateView()
    self.listView:reloadData()
end

return ChatLeftView
