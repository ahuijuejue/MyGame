local UnionJoinLayer = class("UnionJoinLayer",function ()
	return display.newNode()
end)

local listImage = "union_list_bg.png"
local barImage = "union_bar.png"

function UnionJoinLayer:ctor()
	self:initData()
	self:initView()
end

function UnionJoinLayer:initData()
	self.unionCounts  = 0
	self.unionCounts_ = 0
	self.unionData    = {}
	for i,v in ipairs(UnionListData.unionShowList) do
		self.unionCounts = i
		table.insert(self.unionData, v)
	end
end

function UnionJoinLayer:initView()
	self.listView = cc.TableView:create(cc.size(660,335))
	self.listView:setPosition(30,23)
	self.listView:setDirection(cc.SCROLLVIEW_DIRECTION_VERTICAL)
	self.listView:setVerticalFillOrder(cc.TABLEVIEW_FILL_TOPDOWN)
    self.listView:setDelegate()

    self.listView:registerScriptHandler(handler(self, self.scrollViewDidScroll), 0)
    self.listView:registerScriptHandler(handler(self, self.tableCellTouched), cc.TABLECELL_TOUCHED)
	self.listView:registerScriptHandler(handler(self, self.cellSizeForTable), cc.TABLECELL_SIZE_FOR_INDEX)
    self.listView:registerScriptHandler(handler(self, self.tableCellAtIndex), cc.TABLECELL_SIZE_AT_INDEX)
    self.listView:registerScriptHandler(handler(self, self.numberOfCellsInTableView), cc.NUMBER_OF_CELLS_IN_TABLEVIEW)
    self.listView:reloadData()
	self:addChild(self.listView)

    -- local viewSize = self.listView:getViewSize().height
    -- local contenSize = self.listView:getContentSize().height
    -- local percent = viewSize / contenSize
    -- self.sliderBar = display.newSprite("bar.png")
    -- self.sliderBar:setPosition(713, 339)
    -- self:addChild(self.sliderBar)
end

function UnionJoinLayer:scrollViewDidScroll(table)
    -- local sliderPos = self.listView:getContentOffset().y
    -- local sliderPos_ = self.listView:getContentSize().height- self.listView:getViewSize().height
    -- local percent = -(sliderPos/sliderPos_)
    -- if self.sliderBar then
    -- 	self.sliderBar:setPosition(713, 335*percent)
    -- end
end

function UnionJoinLayer:tableCellTouched(table,cell)
	print("cellIdx:"..cell:getIdx())
end

function UnionJoinLayer:cellSizeForTable(table,idx)
	return 100
end

function UnionJoinLayer:tableCellAtIndex(table,idx)
	if idx+1 == self.unionCounts then
		local pageNum = math.ceil((idx+1)/10) + 1
		NetHandler.gameRequest("SHowUnionByPage", { param1 = pageNum})
	end
	return self:createCell(idx)
end

function UnionJoinLayer:numberOfCellsInTableView(table)
	return self.unionCounts
end

function UnionJoinLayer:createCell(idx)
	local cell = cc.TableViewCell:new()
	cell:setIdx(idx)

    local bgSprite = display.newSprite(listImage)
    bgSprite:setAnchorPoint(0,0)
    cell:addChild(bgSprite)

	local data  = self.unionData[idx+1]
	local grid = base.Grid.new()
	self:setGridShow(grid, data, idx+1)
	cell:addChild(grid)

    return cell
end

function UnionJoinLayer:setGridShow(grid, data, index)
	grid:removeItems()
	:addItems({
		display.newSprite(data.icon):pos(55,47), -- 公会头像
        display.newTTFLabel({text = "lv"..index,color = CommonView.color_black()}):pos(120,40),  -- 公会等级 data.exp
        display.newTTFLabel({text = "申请等级"..data.applyLv,color = CommonView.color_black(),size = 22}):pos(560,70),   -- 申请等级
		})
	local centetUnionBtn = CommonButton.yellow("立即加入")   -- 申请加入按钮
					        :onButtonClicked(function ()
								print("申请加入公会")
								NetHandler.gameRequest("ApplyUnion", {param1 = data.id})
							end)
							:pos(565,30)
	if data.isApply == 0 then
		centetUnionBtn:setButtonEnabled(true)
	elseif data.isApply == 1 then
		centetUnionBtn:setButtonEnabled(false)
	end

	local pos = 150
	local member_ = "（"..data.memberNums.."/"..data.memberMaxNums.."）"
    local name = display.newTTFLabel({text = data.name..member_,color = CommonView.color_black(), size = 20})  -- 公会名称
    name:pos(pos+name:getContentSize().width/2,60)
    local des = display.newTTFLabel({text = data.info,color = CommonView.color_black(), size = 20})  -- 公会简介
    des:pos(pos+des:getContentSize().width/2,30)

    grid:addItems({centetUnionBtn, name, des})
end

function UnionJoinLayer:updateData()
	self.unionCounts_ = self.unionCounts
	for i,v in ipairs(UnionListData.unionShowList) do
		self.unionCounts = i
		table.insert(self.unionData, v)
	end
end

function UnionJoinLayer:insertListCell()
	for i,v in ipairs(self.unionData) do
		if i > self.unionCounts_ then
			self.listView:insertCellAtIndex(i-2)
			return self:createCell(i-2)
		end
	end
end

function UnionJoinLayer:updateView()
	self.listView:reloadData()
end

return UnionJoinLayer
