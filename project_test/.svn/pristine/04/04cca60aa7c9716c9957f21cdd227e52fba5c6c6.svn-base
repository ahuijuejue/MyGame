local OpenSmartActMainResponse = class("OpenSmartActMainResponse")

function OpenSmartActMainResponse:ctor()
	--响应消息号
	self.order = 31001
	--返回结果,1:成功
	self.result =  ""
	--活动类型,1:老虎机;2:翻翻乐;3:七日充值;4:财神到;5:开服基金 
	self.param1 =  ""
	--参数活动的次数(老虎机)
	self.param2 =  ""
	--参加活动的进度信息(翻翻乐充值金额rmb)
	self.param3 =  ""
	--活动的状态信息(翻翻乐翻开的牌的号码,没翻时为空)
	self.param4 =  ""
	--物品信息
	self.a_param1 =  ""	
end

function OpenSmartActMainResponse:OpenSmartActMainResponse(data)
	dump(data)
	if data.param1 == 3 then
		GameDispatcher:dispatchEvent({name = EVENT_CONSTANT.NET_CALLBACK,data = data})
	end
	if data.result == 1 then
		if data.param1 == 1 then
			self:updateSlot(data)
		elseif data.param1 == 2 then
			self:updateFlop(data)
		elseif data.param1 == 4 then
			self:updateGambling(data)
		end
		GameDispatcher:dispatchEvent({name = EVENT_CONSTANT.NET_CALLBACK,data = data})
	end
end

function OpenSmartActMainResponse:updateSlot(data)
	if SlotModel then
		SlotModel:update(data)
	else
		SlotModel = require("app.model.SlotModel").new()
		SlotModel:update(data)
	end
end

function OpenSmartActMainResponse:updateFlop(data)
	if FlopModel then
		FlopModel:update(data)
	else
		FlopModel = require("app.model.FlopModel").new()
		FlopModel:update(data)
	end
end

function OpenSmartActMainResponse:updateGambling(data)
	if GamblingModel then
		GamblingModel:update(data)
	else
		GamblingModel = require("app.model.GamblingModel").new()
		GamblingModel:update(data)
	end
end

function OpenSmartActMainResponse:updateBackfeed(data)
	if FeedbackModel then
		FeedbackModel:update(data)
	else
		FeedbackModel = require("app.model.FeedbackModel").new()
		FeedbackModel:update(data)
	end
end

return OpenSmartActMainResponse