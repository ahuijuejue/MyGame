--[[
通用活动数据
]]

local ActivityDataBase = import(".ActivityDataBase")
local ActivityNormalData = class("ActivityNormalData", ActivityDataBase)

local ActivityGameNormal = import(".ActivityGameNormal")
local ActivityGameNormalSection = import(".ActivityGameNormalSection")

function ActivityNormalData:ctor()
	ActivityNormalData.super.ctor(self)

	self.cfg1 = {}  -- 左侧活动名
	self.cfg2 = {}  -- 子活动名

	self.sectionDict = {} -- 所有分区

	self:initDictData()
	self:initSectionDictData()

end

-- 重置活动
function ActivityNormalData:resetDailyData()
	for i,v in ipairs(self.arr) do
		if v.okType == 2 then
			self:resetData(v.activity)
		end
	end
end

function ActivityNormalData:initDictData()
	local cfg = self.cfg2  -- GameConfig["Activity"]

	for k,v in pairs(cfg or {}) do
		local data = ActivityGameNormal.new({
			id  = v.id,
			cfg = v,
		})
        local key = v.id
		self.dict[key] = data
		self.activeCount = self.activeCount + 1
	end
end

function ActivityNormalData:initSectionDictData()
	local cfg = self.cfg1 -- GameConfig["ActivityInfo"]

	for k,v in pairs(cfg or {}) do
		local data = ActivityGameNormalSection.new({
			id = v.id,
			cfg = v,
		})

        local key = v.id
		self.sectionDict[key] = data
		table.insert(self.arr, data)
		data.activity = self:getActivityDataByIds(data.activityIds)
	end

	table.sort(self.arr, function(a, b)
		return a.sort < b.sort
	end)
end


-- 获取分区数据
function ActivityNormalData:getSectionData(sectionId)
	return self.sectionDict[activityId]
end


-- 获取开放的活动系列
function ActivityNormalData:getOpenArray()
	-- local sec = UserData:getServerSecond()
	-- local arr = {}

	-- for i,v in ipairs(self.arr) do
	-- 	if v:isOpen(sec) then
	-- 		table.insert(arr, v)
	-- 	end
	-- end
	return self.arr
end

-- 所有是否含有达成活动条件的区域的情况
function ActivityNormalData:getOkIndexes(sectionArr)
	local list = {
		list = {},
		oklist = {}
	}
	for i,v in ipairs(sectionArr or self.arr) do
		if self:haveOkActivityByIds(v.activityIds) then
			table.insert(list.list, true)
			table.insert(list.oklist, i)
		else
			table.insert(list.list, false)
		end
	end

	return list
end

function ActivityNormalData:haveOkActivity()
	self:updateData()
	local list = self:getOkIndexes(self:getOpenArray())
	list = list.oklist
	return #list > 0
end

-- 增加进度数据
function ActivityNormalData:addParams(okcode, value)
	local sec = UserData:getServerSecond()
	for i,v in ipairs(self.arr) do
		-- if v:isOpen(sec) then
			self:addParamsForList(v.activity ,okcode, value)
		-- end
	end
end

-- 设置进度数据
function ActivityNormalData:setParams(okcode, value)
	local sec = UserData:getServerSecond()
	for i,v in ipairs(self.arr) do
		-- if v:isOpen(sec) then
			self:setParamsForList(v.activity ,okcode, value)
		-- end
	end
end


return ActivityNormalData
