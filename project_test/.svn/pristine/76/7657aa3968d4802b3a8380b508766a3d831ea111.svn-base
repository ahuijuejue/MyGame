local BackChargeData = class("BackChargeData")

function BackChargeData:ctor()
	self.data = {}
	self:createShopData()
end

function BackChargeData:createShopData()
	--IndependentAward表
	local num = table.nums(GameConfig.IndependentAward)	 
	self.data = {}
	for i=1,num do
		local shopItem = self:createItem(i)
		table.insert(self.data,shopItem)
	end
	--读IndependentRecharge表
	local cfg = GameConfig.IndependentRecharge["1"]
	self.item = {
		award = cfg.Award,
		days = cfg.RechargeDays,--总天数
		recharge1 = cfg.RechargeNum1,
		recharge2 = cfg.RechargeNum2,
		recharge3 = cfg.RechargeNum3,
		recharge4 = cfg.RechargeNum4,
		recharge5 = cfg.RechargeNum5,
		rechargeOpenTime = cfg.RechargeOpenTime,
		titleImg = cfg.TitleImg
	}
	-- print("数据是..."..self.item.award[1].."数据days.."..self.item.days)
	--获取开放的第几天
	self.days = self:getDays()
	-- print("这是第几天.."..self.days) --8
end

function BackChargeData:createItem(index)
	local cfg = GameConfig.IndependentAward[tostring(index)]
	local item = {
		awardItemID = cfg.AwardItemID,
		itemNumber = cfg.ItemNumber,
		mark = cfg.Mark,
		sort = cfg.Sort,
		type = cfg.Type
	}
	
	return item
end

--更新商品购买状态
function BackChargeData:updateBuyStatus(index,isBuy)
	self.data[index].isBuy = isBuy or false
end

function BackChargeData:getItem(index)
	return self.data[index]
end

--获取商店开放时间
function BackChargeData:getDays()
	local leftTime = UserData.backRechargeEndTime - UserData.serverTime
	local days = math.floor(leftTime / 86400)
	return math.min(math.max(1,7-days),7) 
end

return BackChargeData